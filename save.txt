<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Chat Box // Python App</title>
		<script
			src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.5/socket.io.js"
			integrity="sha512-luMnTJZ7oEchNDZAtQhgjomP1eZefnl82ruTH/3Oj/Yu5qYtwL7+dVRccACS/Snp1lFXq188XFipHKYE75IaQQ=="
			crossorigin="anonymous"
			referrerpolicy="no-referrer"
		></script>

		<style>
			:root {
				--primary-color: #2d3e8d;
				--primary-light: #2d3e8d;
				--primary-dark: #1a265e;
				--secondary-color: #e8f1f8;
				--text-color: #2c3e50;
				--bg-color: #f0f8ff;
				--message-bg: #e1eeff;
				--system-message-color: #8fa4b8;
			}

			body {
				font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
				margin: 0;
				padding: 0;
				background-color: var(--bg-color);
				color: var(--text-color);
			}

			.chat-container {
				max-width: 800px;
				margin: 20px auto;
				background-color: white;
				border-radius: 15px;
				box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
				overflow: hidden;
			}

			.chat-header {
				background-color: var(--primary-dark);
				color: white;
				padding: 20px;
				text-align: center;
				font-size: 24px;
				font-weight: bold;
			}

			.chat-messages {
				height: 400px;
				overflow-y: auto;
				padding: 20px;
				background-color: var(--secondary-color);
			}

			.message {
				margin-bottom: 15px;
				display: flex;
				align-items: flex-start;
			}

			.message img {
				width: 40px;
				height: 40px;
				border-radius: 50%;
				margin-right: 10px;
				border: 2px solid var(--primary-color);
			}

			.message-content {
				background-color: var(--message-bg);
				padding: 12px;
				border-radius: 18px;
				max-width: 70%;
				box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
			}

			.message-username {
				font-weight: bold;
				margin-bottom: 5px;
				color: var(--primary-dark);
			}

			.chat-input {
				display: flex;
				padding: 20px;
				background-color: white;
				border-top: 1px solid var(--secondary-color);
			}

			#message-input,
			#username-input {
				flex-grow: 1;
				padding: 12px;
				border: 1px solid var(--secondary-color);
				border-radius: 25px;
				margin-right: 10px;
				font-size: 16px;
			}

			#send-button,
			#update-username-button {
				background-color: var(--primary-color);
				color: white;
				border: none;
				padding: 12px 20px;
				border-radius: 25px;
				cursor: pointer;
				font-size: 16px;
				transition: background-color 0.3s ease;
				transition: ease 0.3s;
			}

			#send-button:hover,
			#update-username-button:hover {
				transition: ease 0.3s;
				padding: 13px 21px;
				background-color: var(--primary-dark);
			}

			.username-container {
				display: flex;
				padding: 15px 20px;
				background-color: var(--secondary-color);
				align-items: center;
			}

			#current-username {
				margin-right: 10px;
				font-weight: bold;
				color: var(--primary-dark);
			}

			.system-message {
				text-align: center;
				font-style: italic;
				color: var(--system-message-color);
				margin: 10px 0;
			}

			.message.sent {
				flex-direction: row-reverse;
			}

			.message.sent .message-content {
				background-color: var(--primary-color);
				color: white;
				margin-left: 10px;
				margin-right: 0;
			}

			.message.sent .message-username {
				text-align: right;
				color: white;
			}

			.message.sent img {
				margin-right: 0;
				margin-left: 10px;
			}

			.hidden {
				display: none !important;
			}

			.darken {
				background-color: rgba(74, 74, 74, 0.05) !important;
			}

			.enter-username {
				margin: 0;
				background-color: rgb(134, 134, 134);
				position: absolute;
				width: 400px;
				height: auto;
			    top: 50%;
				left: 50%;
				top: 50%;
				transform: translate(-50%, -50%); 
				border-radius: 15px;
				
				padding: 40px 40px;
				display: flex;
				align-items: center;
				justify-content: center;
			}

			.black-box {
				height: 100%;
				width: 100%;
				top: 0; 
				left: 0; 
				position: fixed; 
				background-color: rgba(0, 0, 0, 0.5);
				backdrop-filter: blur(3px);
			}
		</style>
	</head>
	<body>
		<div class="chat-container">
			<div class="chat-header">Chat Box</div>
			<div class="username-container">
				<span id="current-username"></span>
				<input type="text" id="username-input" placeholder="New username" />
				<button id="update-username-button">Update Username</button>
			</div>
			<div class="chat-messages" id="chat-messages"></div>
			<div class="chat-input">
				<input type="text" id="message-input" placeholder="Type your message..." />
				<button id="send-button">Send</button>
			</div>


			<div class="enter-username">
				<input type="text" id="username-input" placeholder="New username" />
				<button id="new-username-button">Done</button>
			</div>
		</div>
		<div class="black-box"></div>


		<script>
			const socket = io();
			const chatMessages = document.getElementById("chat-messages");
			const messageInput = document.getElementById("message-input");
			const sendButton = document.getElementById("send-button");
			const currentUsernameSpan = document.getElementById("current-username");
			const usernameInput = document.getElementById("username-input");
			const updateUsernameButton = document.getElementById("update-username-button");

			let currentUsername = "";

			socket.on("set_username", (data) => {
				currentUsername = data.username;
				currentUsernameSpan.textContent = `Your username: ${currentUsername}`;
			});

			socket.on("user_joined", (data) => {
				addMessage(`${data.username} joined the chat`, "system");
			});

			socket.on("user_left", (data) => {
				addMessage(`${data.username} left the chat`, "system");
			});

			socket.on("new_message", (data) => {
				addMessage(data.message, "user", data.username, data.avatar);
			});

			socket.on("username_updated", (data) => {
				addMessage(`${data.old_username} changed their name to ${data.new_username}`, "system");
				if (data.old_username === currentUsername) {
					currentUsername = data.new_username;
					currentUsernameSpan.textContent = `Your username: ${currentUsername}`;
				}
			});

			// Sending a new message
			sendButton.addEventListener("click", sendMessage);
			messageInput.addEventListener("keypress", (e) => {
				if (e.key === "Enter") sendMessage();
			});

			updateUsernameButton.addEventListener("click", updateUsername);

			function sendMessage() {
				const message = messageInput.value.trim();
				if (message) {
					socket.emit("send_message", { message });
					messageInput.value = "";
				}
			}

			function updateUsername() {
				const newUsername = usernameInput.value.trim();
				if (newUsername && newUsername !== currentUsername) {
					socket.emit("update_username", { username: newUsername });
					usernameInput.value = "";
				}
			}

			function addMessage(message, type, username = "", avatar = "") {
				const messageElement = document.createElement("div");
				messageElement.className = "message";

				if (type === "user") {
					const isSentMessage = username === currentUsername;
					if (isSentMessage) {
						messageElement.classList.add("sent");
					}

					const avatarImg = document.createElement("img");
					avatarImg.src = avatar;
					messageElement.appendChild(avatarImg);

					const contentDiv = document.createElement("div");
					contentDiv.className = "message-content";

					const usernameDiv = document.createElement("div");
					usernameDiv.className = "message-username";
					usernameDiv.textContent = username;
					contentDiv.appendChild(usernameDiv);

					const messageText = document.createElement("div");
					messageText.textContent = message;
					contentDiv.appendChild(messageText);

					messageElement.appendChild(contentDiv);
				} else {
					messageElement.className = "system-message";
					messageElement.textContent = message;
				}
				chatMessages.appendChild(messageElement);
				chatMessages.scrollTop = chatMessages.scrollHeight;
			}
		</script>
	</body>
</html>




Python 

from flask import Flask, render_template, request
from flask_socketio import SocketIO, emit
import random

#### Backend ####

app = Flask(__name__)
socketio = SocketIO(app)

# key: socket id
# value: username and avatarUrl 
users = {}

@app.route('/')
def index():
    return render_template('index.html')

@socketio.on("connect")
def handle_connect():
    # Generate default username 
    username = f"User_{random.randint(1000,9999)}"
    gender = random.choice(["girl","boy"])
    avatar_url = f" https://avatar.iran.liara.run/public/{gender}?username={username}"

    users[request.sid] = { "username":username, "avatar":avatar_url }
    emit("user_joined", {"username":username,"avatar":avatar_url}, broadcast=True)
    emit("set_username", {"username":username})

@socketio.on("disconnect")
def handle_disconnect():
    # Remove user from dictionary
    user = users.pop(request.sid, None)
    if user:
      emit("user_left", {"username":user["username"]}, broadcast=True)


@socketio.on("send_message")
def handle_message(data):
    # Retrieve information of user in current session 
    user = users.get(request.sid)   
    if user:
        emit("new_message", {
            "username":user["username"],
            "avatar":user["avatar"],
            "message":data["message"]
        }, broadcast=True)

@socketio.on("update_username")
def handle_update_username(data):
    old_username = users[request.sid]["username"]
    new_username = data["username"]
    users[request.sid]["username"] = new_username

    emit("username_updated", {
        "old_username":old_username,
        "new_username":new_username
    }, broadcast=True)

if __name__ == "__main__":
    socketio.run(app, port=5001) 




// Save 2



<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Chat Box // Python App</title>
		<script
			src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.5/socket.io.js"
			integrity="sha512-luMnTJZ7oEchNDZAtQhgjomP1eZefnl82ruTH/3Oj/Yu5qYtwL7+dVRccACS/Snp1lFXq188XFipHKYE75IaQQ=="
			crossorigin="anonymous"
			referrerpolicy="no-referrer"
		></script>

		<style>
			:root {
				--primary-color: #2d3e8d;
				--primary-light: #2d3e8d;
				--primary-dark: #1a265e;
				--secondary-color: #e8f1f8;
				--text-color: #2c3e50;
				--bg-color: #f0f8ff;
				--message-bg: #e1eeff;
				--system-message-color: #8fa4b8;
			}

			body {
				font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
				margin: 0;
				padding: 0;
				background-color: var(--bg-color);
				color: var(--text-color);
			}

			.chat-container {
				max-width: 800px;
				margin: 20px auto;
				background-color: white;
				border-radius: 15px;
				box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
				overflow: hidden;
			}

			.chat-header {
				background-color: var(--primary-dark);
				color: white;
				padding: 20px;
				text-align: center;
				font-size: 24px;
				font-weight: bold;
			}

			.chat-messages {
				height: 400px;
				overflow-y: auto;
				padding: 20px;
				background-color: var(--secondary-color);
			}

			.message {
				margin-bottom: 15px;
				display: flex;
				align-items: flex-start;
			}

			.message img {
				width: 40px;
				height: 40px;
				border-radius: 50%;
				margin-right: 10px;
				border: 2px solid var(--primary-color);
			}

			.message-content {
				background-color: var(--message-bg);
				padding: 12px;
				border-radius: 18px;
				max-width: 70%;
				box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
			}

			.message-username {
				font-weight: bold;
				margin-bottom: 5px;
				color: var(--primary-dark);
			}

			.chat-input {
				display: flex;
				padding: 20px;
				background-color: white;
				border-top: 1px solid var(--secondary-color);
			}

			#message-input,
			#username-input {
				flex-grow: 1;
				padding: 12px;
				border: 1px solid var(--secondary-color);
				border-radius: 25px;
				margin-right: 10px;
				font-size: 16px;
			}

			#send-button,
			#update-username-button {
				background-color: var(--primary-color);
				color: white;
				border: none;
				padding: 12px 20px;
				border-radius: 25px;
				cursor: pointer;
				font-size: 16px;
				transition: background-color 0.3s ease;
				transition: ease 0.3s;
			}

			#send-button:hover,
			#update-username-button:hover,
			#new-username-button:hover {
				transition: ease 0.3s;
				padding: 13px 21px;
				background-color: var(--primary-dark);
			}

			.username-container {
				display: flex;
				padding: 15px 20px;
				background-color: var(--secondary-color);
				align-items: center;
			}

			#current-username {
				margin-right: 10px;
				font-weight: bold;
				color: var(--primary-dark);
			}

			.system-message {
				text-align: center;
				font-style: italic;
				color: var(--system-message-color);
				margin: 10px 0;
			}

			.message.sent {
				flex-direction: row-reverse;
			}

			.message.sent .message-content {
				background-color: var(--primary-color);
				color: white;
				margin-left: 10px;
				margin-right: 0;
			}

			.message.sent .message-username {
				text-align: right;
				color: white;
			}

			.message.sent img {
				margin-right: 0;
				margin-left: 10px;
			}

			.hidden {
				display: none !important;
			}

			.darken {
				background-color: rgba(74, 74, 74, 0.05) !important;
			}

			.enter-username {
				margin: 0;
				background-color: #c8cfd4;
				position: absolute;
				width: 400px;
				height: auto;
			    top: 50%;
				left: 50%;
				top: 50%;
				transform: translate(-50%, -50%); 
				border-radius: 15px;
				display: flex;
				flex-direction: column;
				gap: 20px;
				
				padding: 40px 40px;
				display: flex;
				align-items: center;
				justify-content: center;
				z-index: 10;
				opacity: 0;
				visibility: hidden;
				transition: opacity 0.5s ease, visibility 0.5s ease;
			}
			#new-username-input {
				padding: 10px 10px;
				border-radius: 25px;
				border-color: transparent;
			}
			#new-username-button {
				background-color: var(--primary-color);
				color: white;
				border: none;
				padding: 12px 20px;
				border-radius: 25px;
				cursor: pointer;
				font-size: 16px;
				transition: background-color 0.3s ease;
				transition: ease 0.3s;
			}
			#new-username-input {
				flex-grow: 1;
				padding: 12px;
				border: 1px solid var(--secondary-color);
				border-radius: 25px;
				margin-right: 10px;
				font-size: 16px;
			}

			.black-box {
				height: 100%;
				width: 100%;
				top: 0; 
				left: 0; 
				position: fixed; 
				background-color: rgba(0, 0, 0, 0.8);
				z-index: 5;
				opacity: 0;
				visibility: hidden;
				transition: opacity 0.5s ease, visibility 0.5s ease;
				backdrop-filter: blur(5px);
			}

			.enter-username.visible {
				opacity: 1;
				visibility: visible;
			}
			.black-box.visible {
				opacity: 1;
				visibility: visible;
			}
			
			.pop-information {
				display: flex;
			}
			.pop-header {
				height: calc(20px + 40px); 
				width: calc(100% + 80px); 
				margin-left: -40px;
				margin-right: -40px;
				background-color: var(--primary-dark);
				flex-shrink: 0;
				margin-top: -40px; 
				border-top-left-radius: 15px;
				border-top-right-radius: 15px;
				
			}
			.pop-header h2 {
				color: white;
				align-self: center;
				justify-self: center;
				padding: 15px 0px;
				margin: 0;
				font-size: 26px;
			}
			
			.message:hover .delete {
				opacity: 100;
				transition: ease 0.3s;
			}
			.delete {
				position: relative;
				top: 5px;
				left: 38px;
				fill: rgb(117, 122, 150);
				opacity: 0;
			}
			.delete:hover {
				fill: rgb(173, 176, 195);
				transition: ease 0.3s;
			}
		</style>
	</head>
	<body>
		<div class="chat-container">
			<div class="chat-header">Chat Box</div>
			<div class="username-container">
				<span id="current-username"></span>
				<input type="text" id="username-input" placeholder="New username" />
				<button id="update-username-button">Update Username</button>
			</div>
			<div class="chat-messages" id="chat-messages">
				<!-- <div class="message sent">
					<img src="user_image.jpg">	
					<div class="message-content">
						<div class="message-username">Luca</div>
						<div>Sample message data</div>	
					</div>
					<svg class="delete" id="delete-button" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24": ;msFilter:;"><path d="M16 2H8C4.691 2 2 4.691 2 8v13a1 1 0 0 0 1 1h13c3.309 0 6-2.691 6-6V8c0-3.309-2.691-6-6-6zm4 14c0 2.206-1.794 4-4 4H4V8c0-2.206 1.794-4 4-4h8c2.206 0 4 1.794 4 4v8z"></path><path d="M15.292 7.295 12 10.587 8.708 7.295 7.294 8.709l3.292 3.292-3.292 3.292 1.414 1.414L12 13.415l3.292 3.292 1.414-1.414-3.292-3.292 3.292-3.292z"></path></svg>
				</div> -->
			</div>
			<div class="chat-input">
				<input type="text" id="message-input" placeholder="Type your message..." />
				<button id="send-button">Send</button>
			</div>


			<div class="enter-username" id="enter-username">
				<div class="pop-header">
					<h2>Welcome to Chat Box!</h2>
				</div>
				<div class="pop-information">
					<input type="text" id="new-username-input" placeholder="Enter display name" />
					<button id="new-username-button">Done</button>
				</div>
			</div>
		</div>
		<div class="black-box" id="black-box"></div>


		<script>
			const socket = io();
			const chatMessages = document.getElementById("chat-messages");
			const messageInput = document.getElementById("message-input");
			const sendButton = document.getElementById("send-button");
			const currentUsernameSpan = document.getElementById("current-username");
			const usernameInput = document.getElementById("username-input");
			const updateUsernameButton = document.getElementById("update-username-button");
			const newUsernameButton = document.getElementById("new-username-button");
			const newUsernameInput = document.getElementById("new-username-input");
			const blackBox = document.getElementById("black-box");
			const enterUsername = document.getElementById("enter-username");
			const enterUsernameInput = document.getElementById("new-username-input");
			const deleteButton = document.getElementById("delete-button");

			deleteButton.addEventListener("click", deleteMessage);

			let currentUsername = "";

			function showPopup() {
				enterUsername.classList.add('visible');
				blackBox.classList.add('visible');
			}
			function hidePopup() {
				enterUsername.classList.remove('visible');
				blackBox.classList.remove('visible');
			}

			socket.on("connect", () => {
				showPopup();
			})

			socket.on("set_username", (data) => {
				currentUsername = data.username;
				currentUsernameSpan.textContent = `Your username: ${currentUsername}`;
			});

			socket.on("user_joined", (data) => {
				addMessage(`${data.username} joined the chat`, "system");
			});

			socket.on("user_left", (data) => {
				addMessage(`${data.username} left the chat`, "system");
			});

			socket.on("new_message", (data) => {
				addMessage(data.message, "user", data.username, data.avatar);
			});

			socket.on("username_updated", (data) => {
				addMessage(`${data.old_username} changed their name to ${data.new_username}`, "system");
				if (data.old_username === currentUsername) {
					currentUsername = data.new_username;
					currentUsernameSpan.textContent = `Your username: ${currentUsername}`;
				}
			});

			// Sending a new message
			sendButton.addEventListener("click", sendMessage);
			messageInput.addEventListener("keypress", (e) => {
				if (e.key === "Enter") sendMessage();
			});

			updateUsernameButton.addEventListener("click", updateUsername);

			function sendMessage() {
				const message = messageInput.value.trim();
				if (message) {
					socket.emit("send_message", { message });
					messageInput.value = "";
				}
			}

			function updateUsername() {
				const newUsername = usernameInput.value.trim();
				if (newUsername && newUsername !== currentUsername) {
					socket.emit("update_username", { username: newUsername });
					usernameInput.value = "";
				}
			}

			/*
			<div class="chat-messages" id="chat-messages">
				<div class="message sent">
					<img src="user_image.jpg">	
					<div class="message-content">
						<div class="message-username">Luca</div>
						<div>Sample message data</div>	
					</div>
					<svg class="delete" id="delete-button" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24": ;msFilter:;"><path d="M16 2H8C4.691 2 2 4.691 2 8v13a1 1 0 0 0 1 1h13c3.309 0 6-2.691 6-6V8c0-3.309-2.691-6-6-6zm4 14c0 2.206-1.794 4-4 4H4V8c0-2.206 1.794-4 4-4h8c2.206 0 4 1.794 4 4v8z"></path><path d="M15.292 7.295 12 10.587 8.708 7.295 7.294 8.709l3.292 3.292-3.292 3.292 1.414 1.414L12 13.415l3.292 3.292 1.414-1.414-3.292-3.292 3.292-3.292z"></path></svg>
				</div>
			</div>

			*/

			function addMessage(message, type, username = "", avatar = "") {
				const messageElement = document.createElement("div");
				messageElement.className = "message";

				if (type === "user") {
					const isSentMessage = username === currentUsername;
					if (isSentMessage) {
						messageElement.classList.add("sent");

						const deleteButton = document.createElement("div");
						deleteButton.className = "delete";
						deleteButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"><path d="M16 2H8C4.691 2 2 4.691 2 8v13a1 1 0 0 0 1 1h13c3.309 0 6-2.691 6-6V8c0-3.309-2.691-6-6-6zm4 14c0 2.206-1.794 4-4 4H4V8c0-2.206 1.794-4 4-4h8c2.206 0 4 1.794 4 4v8z"></path><path d="M15.292 7.295 12 10.587 8.708 7.295 7.294 8.709l3.292 3.292-3.292 3.292 1.414 1.414L12 13.415l3.292 3.292 1.414-1.414-3.292-3.292 3.292-3.292z"></path></svg>';
						
						// Add click handler directly to the delete button
						deleteButton.onclick = function() {
							messageElement.remove(); // This will remove the message locally
							// You can also emit a socket event here if you want to delete it for all users
							// socket.emit('delete_message', { messageId: someId });
						};
						
						messageElement.appendChild(deleteButton);
					}

					const avatarImg = document.createElement("img");
					avatarImg.src = avatar;
					messageElement.appendChild(avatarImg);

					const contentDiv = document.createElement("div");
					contentDiv.className = "message-content";

					const usernameDiv = document.createElement("div");
					usernameDiv.className = "message-username";
					usernameDiv.textContent = username;
					contentDiv.appendChild(usernameDiv);

					const messageText = document.createElement("div");
					messageText.textContent = message;
					contentDiv.appendChild(messageText);

					messageElement.appendChild(contentDiv);
				} else {
					messageElement.className = "system-message";
					messageElement.textContent = message;
				}
				chatMessages.appendChild(messageElement);
				chatMessages.scrollTop = chatMessages.scrollHeight;
			}

			// Create new username upon connection
			function createNewUsername() {
				const newUsername = newUsernameInput.value.trim();
				if (newUsername && newUsername !== currentUsername) {
					socket.emit("update_username", { username: newUsername });
					setTimeout(function() {
						newUsernameInput.value = "";
					}, 2000);
				}
				hidePopup();
			}
			newUsernameButton.addEventListener("click", createNewUsername);
			enterUsername.addEventListener("keydown", (e) => {
				if (e.key === "Enter" && enterUsername.contains(document.activeElement)) {
					createNewUsername();
				}
			});

		</script>
	</body>
</html>



from flask import Flask, render_template, request
from flask_socketio import SocketIO, emit
import random
import uuid

#### Backend ####

app = Flask(__name__)
socketio = SocketIO(app)

# key: socket id
# value: username and avatarUrl 
users = {}
messages = {}

@app.route('/')
def index():
    return render_template('index.html')

@socketio.on("connect")
def handle_connect():
    # Generate default username 
    username = f"User_{random.randint(1000,9999)}"
    gender = random.choice(["girl","boy"])
    avatar_url = f" https://avatar.iran.liara.run/public/{gender}?username={username}"

    users[request.sid] = { "username":username, "avatar":avatar_url }
    emit("user_joined", {"username":username,"avatar":avatar_url}, broadcast=True)
    emit("set_username", {"username":username})
    # emit("notification", {"gender":gender})

@socketio.on("disconnect")
def handle_disconnect():
    # Remove user from dictionary
    user = users.pop(request.sid, None)
    if user:
      emit("user_left", {"username":user["username"]}, broadcast=True)


@socketio.on("send_message")
def handle_message(data):
    # Retrieve information of user in current session 
    user = users.get(request.sid)   
    message_id = str(uuid.uuid4())

    # Storing message with unique id
    messages[message_id] = {
            "username":user["username"],
            "avatar":user["avatar"],
            "message":data["message"]
    }

    if user:
        emit("new_message", {
            "username":user["username"],
            "avatar":user["avatar"],
            "message":data["message"],
            "messageId": message_id,
        }, broadcast=True)

@socketio.on("delete_message")
def handle_delete_message(data):
    message_id = data["messageId"]
    message = messages.get(message_id)
    
    if message and message["sender_id"] == request.sid:  
        messages.pop(message_id)
        emit("message_deleted", {"messageId": message_id}, broadcast=True)

@socketio.on("update_username")
def handle_update_username(data):
    old_username = users[request.sid]["username"]
    new_username = data["username"]
    users[request.sid]["username"] = new_username

    emit("username_updated", {
        "old_username":old_username,
        "new_username":new_username
    }, broadcast=True)

if __name__ == "__main__":
    socketio.run(app, port=5001) 